"use strict";(self.webpackChunkstart_school_wiki=self.webpackChunkstart_school_wiki||[]).push([[7939],{3999:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Season 01/Bootcamp C Arc 01/exercise__my_recursive_pow","title":"my_recursive_pow","description":"In this exercise, you will implement a function to calculate the power of a number using recursion. The power operation calculates a number (base) raised to the exponent (power). An exponent less than 0 will return 0, and no overflow handling is required.","source":"@site/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_pow.md","sourceDirName":"Season 01/Bootcamp C Arc 01","slug":"/Season 01/Bootcamp C Arc 01/exercise__my_recursive_pow","permalink":"/startschool-wiki/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_pow","draft":false,"unlisted":false,"editUrl":"https://github.com/start-school/start-school-wiki/tree/main/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_pow.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_label":"(exercise) my_recursive_pow","sidebar_position":9},"sidebar":"documentationSidebar","previous":{"title":"(exercise) my_recursive_factorial","permalink":"/startschool-wiki/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_factorial"},"next":{"title":"(exercise) my_sub","permalink":"/startschool-wiki/docs/Season 01/Bootcamp C Arc 01/exercise__my_sub"}}');var i=r(4848),c=r(8453);const t={sidebar_label:"(exercise) my_recursive_pow",sidebar_position:9},o="my_recursive_pow",l={},d=[{value:"\ud83d\ude80 Key Features",id:"-key-features",level:2},{value:"\ud83d\udcdd Task Requirements",id:"-task-requirements",level:2},{value:"\ud83d\udee0\ufe0f Useful resources for accomplishing this task",id:"\ufe0f-useful-resources-for-accomplishing-this-task",level:2},{value:"Power Function Basics",id:"power-function-basics",level:3},{value:"Recursion Basics",id:"recursion-basics",level:3},{value:"\ud83e\uddea Test Cases",id:"-test-cases",level:2},{value:"\ud83d\udca1 Tips for Beginners",id:"-tips-for-beginners",level:2}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"my_recursive_pow",children:"my_recursive_pow"})}),"\n",(0,i.jsxs)(s.p,{children:["In this exercise, you will implement a function to calculate the power of a number using recursion. The power operation calculates a number (",(0,i.jsx)(s.code,{children:"base"}),") raised to the exponent (",(0,i.jsx)(s.code,{children:"power"}),"). An exponent less than ",(0,i.jsx)(s.code,{children:"0"})," will return ",(0,i.jsx)(s.code,{children:"0"}),", and no overflow handling is required."]}),"\n",(0,i.jsx)(s.h2,{id:"-key-features",children:"\ud83d\ude80 Key Features"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Recursive Approach"}),": Use function calls to calculate the power of a number."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Input Validation"}),": Handle edge cases, such as negative exponents."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Base Case and Recursion"}),": Define clear base cases to stop recursion."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"-task-requirements",children:"\ud83d\udcdd Task Requirements"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Gandalf Testing"}),": All exercises must pass the gandalf test"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"\ufe0f-useful-resources-for-accomplishing-this-task",children:"\ud83d\udee0\ufe0f Useful resources for accomplishing this task"}),"\n",(0,i.jsx)(s.h3,{id:"power-function-basics",children:"Power Function Basics"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://study.com/academy/lesson/how-to-find-the-power-of-a-number.html#:~:text=Lesson%20Summary-,The%20power%20of%20a%20number%20stands%20for%20how%20many%20multiples,by%20itself%20that%20many%20times.",children:"Understanding Power Operation"})}),"\n",(0,i.jsxs)(s.li,{children:["Power calculates the result of multiplying a number (",(0,i.jsx)(s.code,{children:"base"}),") by itself ",(0,i.jsx)(s.code,{children:"power"})," times:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Example: ",(0,i.jsx)(s.code,{children:"2^3 = 2 * 2 * 2 = 8"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"recursion-basics",children:"Recursion Basics"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://www.geeksforgeeks.org/recursion/",children:"Recursion in C"})}),"\n",(0,i.jsx)(s.li,{children:"Recursive functions are functions that call themselves with a reduced problem size."}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"-test-cases",children:"\ud83e\uddea Test Cases"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Base"}),(0,i.jsx)(s.th,{children:"Exponent"}),(0,i.jsx)(s.th,{children:"Expected Output"}),(0,i.jsx)(s.th,{children:"Explanation"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"2"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"2"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"4"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"2^2 = 2 * 2 = 4"}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"2"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"3"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"8"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"2^3 = 2 * 2 * 2 = 8"}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"2"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"4"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"16"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"2^4 = 2 * 2 * 2 * 2 = 16"}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"5"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"0"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"1"})}),(0,i.jsxs)(s.td,{children:["Any number raised to the power of ",(0,i.jsx)(s.code,{children:"0"})," is ",(0,i.jsx)(s.code,{children:"1"}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"3"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"-1"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"0"})}),(0,i.jsxs)(s.td,{children:["Negative exponents return ",(0,i.jsx)(s.code,{children:"0"})," per task rules."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"7"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"1"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"7"})}),(0,i.jsxs)(s.td,{children:["Any number raised to the power of ",(0,i.jsx)(s.code,{children:"1"})," is itself."]})]})]})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"-tips-for-beginners",children:"\ud83d\udca1 Tips for Beginners"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Define Base Cases"}),": For powers, ",(0,i.jsx)(s.code,{children:"base^0 = 1"}),". Handle negative exponents as invalid input by returning ",(0,i.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Recursive Formula"}),": For ",(0,i.jsx)(s.code,{children:"base^power"}),", the recursive formula is ",(0,i.jsx)(s.code,{children:"base * base^(power-1)"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Input Validation"}),": If the exponent is negative, return ",(0,i.jsx)(s.code,{children:"0"})," immediately."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Debugging Tip"}),": Print the intermediate results during recursion to understand the flow of execution."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>t,x:()=>o});var n=r(6540);const i={},c=n.createContext(i);function t(e){const s=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);