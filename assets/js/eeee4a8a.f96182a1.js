"use strict";(self.webpackChunkstart_school_wiki=self.webpackChunkstart_school_wiki||[]).push([[7887],{7732:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Preseason/Data/Bootcamp Python/Python Quest03","title":"Python Quest03 - Basic Functions and Arguments","description":"Welcome to Python Quest03! This quest focuses on fundamental Python concepts including command-line arguments, conditional statements, basic arithmetic operations, and string formatting. You\'ll learn how to create simple functions that handle different data types and perform various operations.","source":"@site/docs/Preseason/Data/Bootcamp Python/Python Quest03.md","sourceDirName":"Preseason/Data/Bootcamp Python","slug":"/Preseason/Data/Bootcamp Python/Python Quest03","permalink":"/startschool-wiki/docs/Preseason/Data/Bootcamp Python/Python Quest03","draft":false,"unlisted":false,"editUrl":"https://github.com/start-school/start-school-wiki/tree/main/docs/Preseason/Data/Bootcamp Python/Python Quest03.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Quest03","sidebar_position":3},"sidebar":"documentationSidebar","previous":{"title":"Quest02","permalink":"/startschool-wiki/docs/Preseason/Data/Bootcamp Python/Python Quest02"},"next":{"title":"Quest 04","permalink":"/startschool-wiki/docs/Preseason/Data/Bootcamp Python/Quest04"}}');var i=s(4848),r=s(8453);const o={sidebar_label:"Quest03",sidebar_position:3},a="Python Quest03 - Basic Functions and Arguments",l={},c=[{value:"\ud83d\ude80 Key Features",id:"-key-features",level:2},{value:"\ud83d\udcdd Task Requirements",id:"-task-requirements",level:2},{value:"\u2699\ufe0f Exercise Breakdown",id:"\ufe0f-exercise-breakdown",level:2},{value:"Ex00: my_first_script_with_args.py",id:"ex00-my_first_script_with_argspy",level:3},{value:"Ex01: my_is_negative.py",id:"ex01-my_is_negativepy",level:3},{value:"Ex02: my_abs.py",id:"ex02-my_abspy",level:3},{value:"Ex03-Ex05: Basic Arithmetic",id:"ex03-ex05-basic-arithmetic",level:3},{value:"Ex06: my_string_formatting.py",id:"ex06-my_string_formattingpy",level:3},{value:"\u26a0\ufe0f Common Pitfalls",id:"\ufe0f-common-pitfalls",level:2},{value:"\ud83d\udee0\ufe0f Useful Resources",id:"\ufe0f-useful-resources",level:2},{value:"Documentation and References",id:"documentation-and-references",level:3},{value:"Exercise-Specific Tips",id:"exercise-specific-tips",level:3},{value:"For my_first_script_with_args.py:",id:"for-my_first_script_with_argspy",level:4},{value:"For String Formatting:",id:"for-string-formatting",level:4},{value:"Testing Tips",id:"testing-tips",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"python-quest03---basic-functions-and-arguments",children:"Python Quest03 - Basic Functions and Arguments"})}),"\n",(0,i.jsx)(n.p,{children:"Welcome to Python Quest03! This quest focuses on fundamental Python concepts including command-line arguments, conditional statements, basic arithmetic operations, and string formatting. You'll learn how to create simple functions that handle different data types and perform various operations."}),"\n",(0,i.jsx)(n.h2,{id:"-key-features",children:"\ud83d\ude80 Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Command Line Arguments"}),": Learn to handle script parameters using sys.argv"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conditional Statements"}),": Practice if-else conditions with number comparison"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Basic Math Operations"}),": Implement fundamental arithmetic operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"String Formatting"}),": Create formatted strings with multiple variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Return Values"}),": Understanding function returns in Python"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-task-requirements",children:"\ud83d\udcdd Task Requirements"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File Structure"}),": Ensure correct file names and directory structure for each exercise"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Function Prototypes"}),": Follow the exact function signatures provided"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Return Types"}),": Match the specified return types (integers, strings, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameter Types"}),": Handle parameters according to their specified types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing Requirements"}),": Comment out all function test calls before submission"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-exercise-breakdown",children:"\u2699\ufe0f Exercise Breakdown"}),"\n",(0,i.jsx)(n.h3,{id:"ex00-my_first_script_with_argspy",children:"Ex00: my_first_script_with_args.py"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"sys.argv"})," to access command-line arguments"]}),"\n",(0,i.jsxs)(n.li,{children:["Remember that ",(0,i.jsx)(n.code,{children:"sys.argv[0]"})," is the script name"]}),"\n",(0,i.jsx)(n.li,{children:"Print each argument on a new line using loop"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ex01-my_is_negativepy",children:"Ex01: my_is_negative.py"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Return 1 for positive numbers or zero"}),"\n",(0,i.jsx)(n.li,{children:"Return 0 for negative numbers"}),"\n",(0,i.jsx)(n.li,{children:"Use simple if-else structure"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ex02-my_abspy",children:"Ex02: my_abs.py"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Return absolute value without using abs()"}),"\n",(0,i.jsx)(n.li,{children:"Handle both positive and negative integers"}),"\n",(0,i.jsx)(n.li,{children:"Consider zero case"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ex03-ex05-basic-arithmetic",children:"Ex03-Ex05: Basic Arithmetic"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"my_add.py: Addition operation"}),"\n",(0,i.jsx)(n.li,{children:"my_sub.py: Subtraction operation"}),"\n",(0,i.jsx)(n.li,{children:"my_mult.py: Multiplication operation"}),"\n",(0,i.jsx)(n.li,{children:"Handle positive and negative integers"}),"\n",(0,i.jsx)(n.li,{children:"Consider edge cases (zero, large numbers)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ex06-my_string_formattingpy",children:"Ex06: my_string_formatting.py"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use string formatting to combine variables"}),"\n",(0,i.jsx)(n.li,{children:"Include proper spacing between words"}),"\n",(0,i.jsx)(n.li,{children:"Add newline at the end of output"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-common-pitfalls",children:"\u26a0\ufe0f Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Forgetting to import sys for argv"}),"\n",(0,i.jsx)(n.li,{children:"Not commenting out test calls"}),"\n",(0,i.jsx)(n.li,{children:"Missing newline in string formatting"}),"\n",(0,i.jsx)(n.li,{children:"Incorrect handling of negative numbers"}),"\n",(0,i.jsx)(n.li,{children:"Wrong return type (int vs string)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-useful-resources",children:"\ud83d\udee0\ufe0f Useful Resources"}),"\n",(0,i.jsx)(n.h3,{id:"documentation-and-references",children:"Documentation and References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/sys.html#sys.argv",children:"Python Command Line Arguments"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals",children:"Python String Formatting"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.python.org/3/tutorial/controlflow.html#if-statements",children:"Python Conditional Statements"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"exercise-specific-tips",children:"Exercise-Specific Tips"}),"\n",(0,i.jsx)(n.h4,{id:"for-my_first_script_with_argspy",children:"For my_first_script_with_args.py:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import sys\n# sys.argv[1:] gives all arguments except the script name\n"})}),"\n",(0,i.jsx)(n.h4,{id:"for-string-formatting",children:"For String Formatting:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# f-strings are readable and efficient\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-tips",children:"Testing Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Test with edge cases (0, negative numbers, large numbers)"}),"\n",(0,i.jsx)(n.li,{children:"Verify newline characters where required"}),"\n",(0,i.jsx)(n.li,{children:"Check return types match specifications"}),"\n",(0,i.jsx)(n.li,{children:"Test with various argument combinations"}),"\n",(0,i.jsx)(n.li,{children:"Remember to comment out test calls before submission"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);