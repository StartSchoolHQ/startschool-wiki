"use strict";(self.webpackChunkstart_school_wiki=self.webpackChunkstart_school_wiki||[]).push([[637],{7822:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Season 01/Bootcamp C Arc 01/exercise__my_recursive_factorial","title":"my_recursive_factorial","description":"In this exercise, you will implement a function to calculate the factorial of a given number using recursion. The factorial of a number is the product of all positive integers less than or equal to that number. Unlike the iterative approach, this solution leverages recursive function calls.","source":"@site/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_factorial.md","sourceDirName":"Season 01/Bootcamp C Arc 01","slug":"/Season 01/Bootcamp C Arc 01/exercise__my_recursive_factorial","permalink":"/startSchool-wiki/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_factorial","draft":false,"unlisted":false,"editUrl":"https://github.com/start-school/start-school-wiki/tree/main/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_factorial.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_label":"(exercise) my_recursive_factorial","sidebar_position":8},"sidebar":"documentationSidebar","previous":{"title":"(exercise) my_print_alphabet","permalink":"/startSchool-wiki/docs/Season 01/Bootcamp C Arc 01/exercise__my_print_alphabet"},"next":{"title":"(exercise) my_recursive_pow","permalink":"/startSchool-wiki/docs/Season 01/Bootcamp C Arc 01/exercise__my_recursive_pow"}}');var n=i(4848),c=i(8453);const t={sidebar_label:"(exercise) my_recursive_factorial",sidebar_position:8},l="my_recursive_factorial",o={},a=[{value:"\ud83d\ude80 Key Features",id:"-key-features",level:2},{value:"\ud83d\udcdd Task Requirements",id:"-task-requirements",level:2},{value:"\ud83d\udee0\ufe0f Useful resources for accomplishing this task",id:"\ufe0f-useful-resources-for-accomplishing-this-task",level:2},{value:"Recursion Basics",id:"recursion-basics",level:3},{value:"Factorial Basics",id:"factorial-basics",level:3},{value:"\ud83e\uddea Test Cases",id:"-test-cases",level:2},{value:"\ud83d\udca1 Tips for Beginners",id:"-tips-for-beginners",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"my_recursive_factorial",children:"my_recursive_factorial"})}),"\n",(0,n.jsx)(s.p,{children:"In this exercise, you will implement a function to calculate the factorial of a given number using recursion. The factorial of a number is the product of all positive integers less than or equal to that number. Unlike the iterative approach, this solution leverages recursive function calls."}),"\n",(0,n.jsx)(s.h2,{id:"-key-features",children:"\ud83d\ude80 Key Features"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Recursive Approach"}),": Use function calls to calculate factorial recursively."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Input Validation"}),": Handle invalid inputs, such as negative numbers."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Base Case and Recursion"}),": Define clear base cases to stop recursion."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"-task-requirements",children:"\ud83d\udcdd Task Requirements"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Gandalf Testing"}),": All exercises must pass the gandalf test"]}),"\n"]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"\ufe0f-useful-resources-for-accomplishing-this-task",children:"\ud83d\udee0\ufe0f Useful resources for accomplishing this task"}),"\n",(0,n.jsx)(s.h3,{id:"recursion-basics",children:"Recursion Basics"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://www.geeksforgeeks.org/recursion/",children:"Recursion in C"})}),"\n",(0,n.jsxs)(s.li,{children:["Recursion is a method where a function calls itself with a reduced problem size.","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Example: ",(0,n.jsx)(s.code,{children:"n! = n * (n-1)!"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"factorial-basics",children:"Factorial Basics"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://www.mathsisfun.com/numbers/factorial.html",children:"Understanding Factorial"})}),"\n"]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"-test-cases",children:"\ud83e\uddea Test Cases"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Input"}),(0,n.jsx)(s.th,{children:"Expected Output"}),(0,n.jsx)(s.th,{children:"Explanation"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"2"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"2"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"2! = 2 * 1 = 2"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"3"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"6"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"3! = 3 * 2 * 1 = 6"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"4"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"24"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"4! = 4 * 3 * 2 * 1 = 24"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"0"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"1"})}),(0,n.jsxs)(s.td,{children:["By definition, ",(0,n.jsx)(s.code,{children:"0! = 1"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"-1"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"0"})}),(0,n.jsx)(s.td,{children:"Factorial is undefined for negative numbers."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"5"})}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"120"})}),(0,n.jsxs)(s.td,{children:["Computed recursively as ",(0,n.jsx)(s.code,{children:"5 * 4 * 3 * 2 * 1"}),"."]})]})]})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"-tips-for-beginners",children:"\ud83d\udca1 Tips for Beginners"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Define Base Cases"}),": Recursion must stop at a base case. For factorials, this is ",(0,n.jsx)(s.code,{children:"0! = 1"})," or ",(0,n.jsx)(s.code,{children:"1! = 1"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Recursive Formula"}),": For ",(0,n.jsx)(s.code,{children:"n!"}),", the recursive formula is ",(0,n.jsx)(s.code,{children:"n * (n-1)!"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Input Validation"}),": If the input is negative, return ",(0,n.jsx)(s.code,{children:"0"})," immediately since factorials of negative numbers are undefined."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Stack Limitations"}),": Be aware that recursion uses the call stack. For very large inputs, this could cause a stack overflow."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Debugging Tip"}),": Print intermediate recursive calls to understand the flow of execution."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>t,x:()=>l});var r=i(6540);const n={},c=r.createContext(n);function t(e){const s=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),r.createElement(c.Provider,{value:s},e.children)}}}]);